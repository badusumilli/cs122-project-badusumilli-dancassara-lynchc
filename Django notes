Django workshop notes:

only language browsers can run: javascript

Django serves html, css, python 

curl -i http://example.com

webroswer requests all images while reading html

Java model-view-controller: 
						user -> controller
						controller -> model
						model -> view
our controller is a url-dispatcher, controller sends to view function, which can communicate with the database (model) and generate the final webpage

entry "detail" page (single entry) could be good for homepage

question "detail" page for questions

two pages make them link:
1. start.html page (views.start), create an about page about.html (views.about)
2. go to urls dispatcher (outer shell) and add the about page in the urls list Add name line to the dispatcher to create the link in html via django
3. set a new function for the about page in the views.py file
4. when linking pages, the name='' method should be used in each url dispatcher list entry. That way the name can be easily changed and used no matter what the page text reads. 
5. create a new html file that has a {% block body %} method that encompasses the html code (inserted into base.html) so that you can reproduce a header on every page. 
6. html code <h1> {{title|upper}} </h1> built in function that makes words uppercase
7. {% if title %} will display title if it is already defined 

models.py in diary subdirectory, database creation, manipulation, and use:
1. add classes to store the data type in a sql database 
2. command python manage.py migrate will adjust the database format to match the classes.
3. import the Class.models into the url dispatcher in order to call the values using the database system created through the python classes


building a form using django: 
1. create a class to add a form, this will use the rest of the classes
2. using modelform connects the form to a particular class
3. specify which fields you want to be able to modify
4. two methods: get and post, post method does more?
5. post method needs an added html expression to make sure that the file comes from YOUR website, you need to reload the previous page so that the token is created for this to work. 
6. add a line to reset the form so that it can be used again! 

static files: 
1. a folder with files that is just sent straight to the user: 
	images
	css files
	javascript files
	any other cacheable file type that is not changed based on web activity
2. mysite/static/filename
3. add the static directory to the base.html so that every page has access to the static files if necessary 

creating a function:
1. views.py create a function to call
2. do yer thang
3. 